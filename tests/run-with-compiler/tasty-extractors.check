Literal(Boolean(true))
ConstantType(Boolean(true))

Literal(Int(1))
ConstantType(Int(1))

Literal(Long(2))
ConstantType(Long(2))

Literal(Double(2.0))
ConstantType(Double(2.0))

Literal(String("abc"))
ConstantType(String("abc"))

Apply(Ident(println), List(Literal(String("abc"))))
###

Typed(Literal(Int(8)), Ident(Int))
NameRef(Int, ###)

Block(List(Literal(Int(1)), Literal(Int(2))), Literal(Int(3)))
ConstantType(Int(3))

If(Typed(Literal(Boolean(true)), Ident(Boolean)), Literal(Int(1)), Literal(Int(2)))
###

Match(Literal(String("a")), List(CaseDef(Value(Literal(String("a"))), None, Block(Nil, Literal(Unit())))))
###

Match(Literal(String("b")), List(CaseDef(Bind(n, Wildcard()), None, Block(Nil, Literal(Unit())))))
###

Match(Literal(String("c")), List(CaseDef(Bind(n, TypeTest(Ident(String))), None, Block(Nil, Literal(Unit())))))
###

Match(Literal(String("e")), List(CaseDef(Wildcard(), None, Block(Nil, Literal(Unit())))))
###

Match(Literal(String("f")), List(CaseDef(TypeTest(Ident(String)), None, Block(Nil, Literal(Unit())))))
###

Match(Literal(String("g")), List(CaseDef(Alternative(List(TypeTest(Ident(String)), TypeTest(Ident(Int)))), None, Block(Nil, Literal(Unit())))))
###

Match(Literal(String("h")), List(CaseDef(Wildcard(), Some(Literal(Boolean(false))), Block(Nil, Literal(Unit())))))
###

Block(List(ValDef(a, Synthetic(), Some(Literal(String("o"))), List())), Match(Literal(String("i")), List(CaseDef(Bind(a, Wildcard()), None, Block(Nil, Literal(Unit()))))))
###

Try(Literal(Int(1)), List(CaseDef(Wildcard(), None, Block(Nil, Literal(Unit())))), None)
OrType(###, ###)

Try(Literal(Int(2)), Nil, Some(Literal(Unit())))
ConstantType(Int(2))

Try(Literal(Int(3)), List(CaseDef(Wildcard(), None, Block(Nil, Literal(Unit())))), Some(Literal(Unit())))
OrType(###, ###)

Apply(Select(Literal(String("a")), ==), List(Literal(String("b"))))
###

Apply(Select(New(Ident(Object)), <init>), Nil)
###

Apply(Select(Ident(Int), box), List(NamedArg(x, Literal(Int(9)))))
###

Apply(TypeApply(Select(Ident(Ordering), apply), List(Ident(Int))), List(Ident(Int)))
AppliedType(###, List(NameRef(Int, ###)))

Block(List(ValDef(a, Ident(Int), Some(Literal(Int(3))), List())), Literal(Unit()))
###

Block(List(ValDef(b, Ident(Int), Some(Literal(Int(3))), List())), Literal(Unit()))
###

Block(List(DefDef(c, List(), List(), Ident(Int), Some(Literal(Int(3))), List())), Literal(Unit()))
###

Block(List(DefDef(d, List(), List(), Ident(Int), Some(Return(Literal(Int(4)))), List())), Literal(Unit()))
###

Block(List(ValDef(x, Synthetic(), Some(Literal(Int(1))), List())), Assign(Ident(x), Literal(Int(2))))
###

Block(List(DefDef($anonfun, List(), List(List(ValDef(x, Ident(Int), None, List()))), Synthetic(), Some(Ident(x)), List())), Lambda(Ident($anonfun), None))
AppliedType(###, List(NameRef(Int, ###), NameRef(Int, ###)))

Ident(???)
###

Typed(Literal(Int(1)), Singleton(Literal(Int(1))))
ConstantType(Int(1))

Typed(Literal(Int(1)), Ident(Int))
NameRef(Int, ###)

Typed(Ident(Nil), Applied(Ident(List), List(Ident(Int))))
AppliedType(###, List(NameRef(Int, ###)))

Typed(Literal(Int(1)), And(Ident(Int), Ident(Int)))
AndType(NameRef(Int, ###), NameRef(Int, ###))

Typed(Literal(Int(1)), Or(Ident(Int), Ident(String)))
OrType(NameRef(Int, ###), NameRef(String, NameRef(Predef, ###)))

Block(List(Import(Select(Ident(scala), collection), List(Simple(Id(mutable))))), Literal(Int(1)))
ConstantType(Int(1))

Block(List(Import(Select(Ident(scala), collection), List(Simple(Id(mutable)), Simple(Id(immutable))))), Literal(Int(2)))
ConstantType(Int(2))

Block(List(Import(Select(Ident(scala), collection), List(Rename(Id(mutable),Id(mut))))), Literal(Int(3)))
ConstantType(Int(3))

Block(List(Import(Select(Ident(scala), collection), List(Omit(Id(mutable))))), Literal(Int(4)))
ConstantType(Int(4))

Block(List(ClassDef(Foo, DefDef(<init>, List(), List(List()), Synthetic(), None, List()), List(Apply(Select(New(Synthetic()), <init>), Nil)), None, List(), List())), Literal(Unit()))
###

Block(List(ValDef(Foo, Ident(Foo$), Some(Apply(Select(New(Ident(Foo$)), <init>), Nil)), List()), ClassDef(Foo$, DefDef(<init>, List(), List(List()), Synthetic(), None, List()), List(Apply(Select(New(Synthetic()), <init>), Nil)), Some(ValDef(_, Singleton(Ident(Foo)), None, List())), List(), List())), Literal(Unit()))
###

Block(List(TypeDef(Foo, TypeBounds(Synthetic(), Synthetic()), List())), Literal(Unit()))
###

Block(List(TypeDef(Foo, Ident(Int), List())), Literal(Unit()))
###

Block(List(TypeDef(Foo, TypeBounds(Ident(Null), Ident(Object)), List())), Literal(Unit()))
###

