package dotty.tools.dotc.tasty

import dotty.tools.dotc.ast.untpd
import dotty.tools.dotc.core.Contexts.Context

import scala.tasty


object Modifier {

  def apply(tree: untpd.Mod)(implicit ctx: Context): scala.tasty.Modifier = Impl(tree, ctx)

//  object Private {
//    def unapply(term: scala.tasty.Modifier): Boolean = term match {
//      case Impl(???, ctx) => true
//      case _ => false
//    }
//  }

//  case Private, Protected, Abstract, Final, Sealed, Case, Implicit, Erased, Lazy, Override, Inline,
//  Macro,                 // inline method containing toplevel splices
//  Static,                // mapped to static Java member
//  Object,                // an object or its class (used for a ValDef or a ClassDef, respectively)
//  Trait,                 // a trait (used for a ClassDef)
//  Local,                 // used in conjunction with Private/private[Type] to mean private[this], proctected[this]
//  Synthetic,             // generated by Scala compiler
//  Artifact,              // to be tagged Java Synthetic
//  Mutable,               // when used on a ValDef: a var
//  Label,                 // method generated as a label
//  FieldAccessor,         // a getter or setter
//  CaseAcessor,           // getter for case class parameter
//  Covariant,             // type parameter marked “+”
//  Contravariant,         // type parameter marked “-”
//  Scala2X,               // Imported from Scala2.x
//  DefaultParameterized,  // Method with default parameters
//  Stable                 // Method that is assumed to be stable
//
//  case QualifiedPrivate(boundary: Type)
//  case QualifiedProtected(boundary: Type)
//  case Annotation(tree: Term)

  private case class Impl(tree: untpd.Mod, ctx: Context) extends scala.tasty.Modifier {

    override def pos: tasty.Position = ???

    override def toString: String = this match {
//      case Private() => s"Private()"
      case _ => s"Modifier"
    }
  }
}
