package scala.tasty
package modifiers

trait Modifier extends Positioned {

  def isProtected: Boolean = false
  def isAbstract: Boolean = false
  def isFinal: Boolean = false
  def isSealed: Boolean = false
  def isCase: Boolean = false
  def isImplicit: Boolean = false
  def isErased: Boolean = false
  def isLazy: Boolean = false
  def isOverride: Boolean = false
  def isInline: Boolean = false
  def isMacro: Boolean = false                 // inline method containing toplevel splices
  def isStatic: Boolean = false                // mapped to static Java member
  def isObject: Boolean = false                // an object or its class (used for a ValDef or a ClassDef extends Modifier respectively)
  def isTrait: Boolean = false                 // a trait (used for a ClassDef)
  def isLocal: Boolean = false                 // used in conjunction with Private/private[Type] to mean private[this] extends Modifier proctected[this]
  def isSynthetic: Boolean = false             // generated by Scala compiler
  def isArtifact: Boolean = false              // to be tagged Java Synthetic
  def isMutable: Boolean = false               // when used on a ValDef: a var
  def isLabel: Boolean = false                 // method generated as a label
  def isFieldAccessor: Boolean = false         // a getter or setter
  def isCaseAcessor: Boolean = false           // getter for class parameter
  def isCovariant: Boolean = false             // type parameter marked “+”
  def isContravariant: Boolean = false         // type parameter marked “-”
  def isScala2X: Boolean = false               // Imported from Scala2.x
  def isDefaultParameterized: Boolean = false  // Method with default parameters
  def isStable: Boolean = false                // Method that is assumed to be stable

}

object QualifiedPrivate {
  type Data = types.Type
  def unapply(arg: Modifier)(implicit ext: Extractor): Option[Data] = ext.unapplyQualifiedPrivate(arg)
}

object QualifiedProtected {
  type Data = types.Type
  def unapply(arg: Modifier)(implicit ext: Extractor): Option[Data] = ext.unapplyQualifiedProtected(arg)
}

object Annotation {
  type Data = terms.Term
  def unapply(arg: Modifier)(implicit ext: Extractor): Option[Data] = ext.unapplyAnnotation(arg)
}
